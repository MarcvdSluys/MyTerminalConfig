#!/bin/bash

##  dagman-out-list-errors: show the errors in a .dagman.out file
##  2021-12-02, MvdS:  initial version, adapted from dagman-out-final.

# Check command-line arguments:
if [ ${#} -eq 0 ]
then
    command=`echo ${0} |sed -e "s/^.*\///g"`  # Remove path (e.g. ./)
    echo "This program shows the errors in a .dagman.out file"
    echo "Syntax:  ${command} <file.dagman.out>"
    echo "No file name was provided, looking for the latest .dagman.out file in the current dir."
    FILES=`ls -rt *.dagman.out | tail -1`
    if [[ "$FILES" == "" ]]
    then
	echo "No dagman.out file found, aborting."
	exit 0
    fi
else
    # All arguments are considered file names:
    FILES="$@"
fi

# Loop through the file(s) and list any errors:
for FILE in $FILES
do
    echo -e "\n$FILE:"
    
    # Print error messages:
    grep -B4 -A6 'Node Status: .*ERROR' $FILE
    
    # Construct and print name of error file:
    NODENAME=`grep -B3 'Node Status: .*ERROR' $FILE | grep 'Node Name:' | awk '{print $5}' | sed 's|\.|_|g'`
    JOBID=`grep -A6 'Node Status: .*ERROR' $FILE | grep 'HTCondor Job ID:' | grep -v '\[not yet submitted\]' | awk '{print $6}' | sed -e 's|(||g' -e 's|\.[0-9])$||g' -e 's|\.|-|g'`
    ERRFILE="logs/$NODENAME-$JOBID.err"
    if [ "$ERRFILE" != "logs/-.err" ]
    then
	echo -e "\E[1;32m                  ERROR FILE: $ERRFILE\E[0m"
    fi
    
done

echo
